import streamlit as st
import requests
import json

from utils.helpers import (
    fetch_nominal_compositions,
    fetch_nominal_composition_exploration_jobs,
    AIRFLOW_API_URL,
    GeometricTransformations,
)

##########################################################################
#
# Globals
#
##########################################################################


##########################################################################
#
# Helpers
#
##########################################################################


# Session state attributes initialization
def initialize_session_state(st):

    if "selected_nc" not in st.session_state:
        st.session_state.selected_nc = None

    if "selected_run_id" not in st.session_state:
        st.session_state.selected_run_id = None

    if "nc_runs_subruns_from_db" not in st.session_state:
        st.session_state.nc_runs_subruns_from_db = None

    if "selected_sub_runs" not in st.session_state:
        st.session_state.selected_sub_runs = {}


# Check if a given Run has a specific SubRun
def get_scheduled_sub_run_numbers(runs, run_number):

    for run in runs:
        if run["run_number"] == run_number:
            return [sub_run["sub_run_number"] for sub_run in run["sub_runs"]]

    return []


##########################################################################
#
# Streamlit actions and rendering
#
##########################################################################

# TODO: review the code (behavior not working as expected)
# TODO: load the state of all runs and sub-runs in the DB when user changes a NCs

st.set_page_config(page_title="Pre-Deployment Exploitation DAG", layout="centered")
st.title("Pre-Deployment Exploitation DAG")

# Session state attributes initialization
initialize_session_state(st)

# Drop-down for Nominal Composition (NC) selection
all_ncs = fetch_nominal_compositions(st)
selected_nc = st.selectbox("Select a Nominal Composition", [c["name"] for c in all_ncs])


# Reset session flags and cached data for NC, Run, and SubRuns (transformations)
# Also querying all Runs and Subruns for the selected NC
changed_nc = selected_nc != st.session_state.selected_nc

if changed_nc:  # When a different NC was selected in the drop-down
    st.session_state.selected_nc = selected_nc
    st.session_state.selected_run_id = None
    st.session_state.nc_runs_subruns_from_db = (
        fetch_nominal_composition_exploration_jobs(selected_nc, True, st)
    )
    st.session_state.selected_sub_runs.clear()

if selected_nc:

    if st.session_state.nc_runs_subruns_from_db:  # If the NC has scheduled Runs

        # Configuring the drop-down with Runs and getting the id of the selected Run
        conv_run_number_to_id = {
            f"Run {r['run_number']}": r["id"]
            for r in st.session_state.nc_runs_subruns_from_db
        }

        runs_labels = list(conv_run_number_to_id.keys())

        selected_run_label = st.selectbox(
            "Select a Nominal Composition Run", runs_labels
        )

        selected_run_id = conv_run_number_to_id[selected_run_label]

        # Update session state for selected run
        changed_run = selected_run_id != st.session_state.selected_run_id

        if changed_run:
            st.session_state.selected_run_id = selected_run_id

        # List of all transformation options
        all_gtransf_options = list(GeometricTransformations)

        # The set of checkboxes with transformations
        selected_sub_runs = []

        if selected_run_id in st.session_state.selected_sub_runs:
            already_selected_sub_runs = st.session_state.selected_sub_runs[
                selected_run_id
            ]
        else:
            already_selected_sub_runs = []

        already_scheduled_sub_runs = get_scheduled_sub_run_numbers(
            st.session_state.nc_runs_subruns_from_db,
            selected_run_id,
        )

        with st.container():

            # Otherwise, show individual checkboxes
            for transf in all_gtransf_options:

                key = f"{transf.name}_{selected_run_id}"  # Unique key per run

                is_checked = (
                    transf.index in already_selected_sub_runs
                    or transf.index in already_scheduled_sub_runs
                )

                is_disabled = transf.index in already_scheduled_sub_runs

                checked_transf = st.checkbox(
                    transf.label,
                    key=key,
                    value=is_checked,
                    disabled=is_disabled,
                )

                if checked_transf:
                    selected_sub_runs.append(transf.index)

        # Store the selected transformations for this run
        st.session_state.selected_sub_runs[selected_run_id] = selected_sub_runs

    else:
        st.write(f"No Runs for Nominal Composition {selected_nc}")


st.write(f"nc_runs_subruns_selected: {st.session_state.selected_sub_runs}")

if st.button("Trigger DAG"):

    st.write(
        f"sub_runs_to_submit: {list(set(st.session_state.selected_sub_runs[st.session_state.selected_run_id]) - set(already_scheduled_sub_runs))}"
    )
    st.write(f"already_scheduled_sub_runs: {already_scheduled_sub_runs}")

    # dag_id = "pre_deployment_exploration"  # TODO: shouldn't be hardcoded

    # api_conf = {"nominal_composition": selected_nc, "num_simulations": selected_n_runs}

    # response = requests.post(
    #     f"{AIRFLOW_API_URL}/api/v1/dags/{dag_id}/dagRuns",
    #     auth=("admin", "admin"),
    #     json={"conf": api_conf},
    # )

    # if response.status_code == 200:
    #     st.success("DAG triggered successfully!")
    # else:
    #     st.error(f"Failed: {response.text}")
