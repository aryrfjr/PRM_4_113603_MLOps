import streamlit as st
import requests
import json

from utils.helpers import (
    fetch_nominal_compositions,
    fetch_nominal_composition_runs,
    AIRFLOW_API_URL,
    GeometricTransformations,
)

##########################################################################
#
# Globals
#
##########################################################################

##########################################################################
#
# Helpers
#
##########################################################################

##########################################################################
#
# Streamlit actions and rendering
#
##########################################################################

# TODO: review the code (behavior not working as expected)
# TODO: load the state of all runs and sub-runs in the DB when user changes a NCs

st.set_page_config(page_title="Pre-Deployment Exploitation DAG", layout="centered")
st.title("Pre-Deployment Exploitation DAG")

# Initialize session state
if "selected_nc" not in st.session_state:
    st.session_state.selected_nc = None

if "selected_run_id" not in st.session_state:
    st.session_state.selected_run_id = None

if "transformations_per_run" not in st.session_state:
    st.session_state.transformations_per_run = {}

# Fetch compositions
all_ncs = fetch_nominal_compositions(st)
selected_nc = st.selectbox("Select a Nominal Composition", [c["name"] for c in all_ncs])

# Reset transformations state if user selects a different composition
if selected_nc != st.session_state.selected_nc:
    st.session_state.selected_nc = selected_nc
    st.session_state.selected_run_id = None  # reset run ID
    st.session_state.transformations_per_run.clear()  # clear stored selections

if selected_nc:
    selected_nc_runs = fetch_nominal_composition_runs(selected_nc, st)

    if selected_nc_runs:
        run_number_to_id = {f"Run {r['run_number']}": r["id"] for r in selected_nc_runs}
        runs_labels = list(run_number_to_id.keys())

        selected_label = st.selectbox("Select a Nominal Composition Run", runs_labels)
        selected_id = run_number_to_id[selected_label]

        # Update session state for selected run
        if selected_id != st.session_state.selected_run_id:
            st.session_state.selected_run_id = selected_id

        # List of transformation options
        options = list(GeometricTransformations)

        # Select all checkbox
        select_all = st.checkbox("Select all transformations")

        # Determine current default selection
        default_selection = (
            options
            if select_all
            else st.session_state.transformations_per_run.get(selected_id, [options[0]])
        )

        # Show multiselect
        selected_transformations = st.multiselect(
            "Choose geometric transformations:",
            options,
            default=default_selection,
            format_func=lambda e: e.label,
        )

        # Store selection in session state
        st.session_state.transformations_per_run[selected_id] = selected_transformations

    else:
        st.write(f"No Runs for Nominal Composition {selected_nc}")

# Prepare JSON structure
transformations_json = {
    "transformations": [
        {"id_run": str(run_id), "sub_runs": [str(t.index) for t in transformations]}
        for run_id, transformations in st.session_state.transformations_per_run.items()
        if transformations  # Only include runs with at least one selection
    ]
}

# Display or use the JSON (you can also send it to a backend)
st.subheader("Generated JSON")
st.json(transformations_json)
